name: Build PVE KVM images
on:
  schedule:
    - cron: '34 0 * * *'
  workflow_dispatch:

jobs:
  build_pve_kvm_images:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: check path
      run: |
        pwd

    - name: Configure Git
      run: |
        git config --global user.name "XiYan"
        git config --global user.email "i@xiyan.it"

    - name: Environment preparation
      run: |
        export LIBGUESTFS_DEBUG=1
        export LIBGUESTFS_TRACE=1
        sudo apt-get update
        sudo apt-get install -y curl wget unzip zip jq
        sudo apt-get install -y libguestfs-tools rng-tools curl
        sudo apt-get install -y libguestfs-tools rng-tools curl --fix-missing
        sudo apt-get install -y qemu-utils
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        curl -o rebuild_qcow2.sh https://raw.githubusercontent.com/XiYan233/pve_kvm_images/main/rebuild_qcow2.sh
        chmod 777 rebuild_qcow2.sh

    - name: Download qcow2
      run: | 
        images=($(curl -s -m 6 https://down.idc.wiki/Image/realServer-Template/current/qcow2/ | grep -o '<a href="[^"]*">' | awk -F'"' '{print $2}' | sed -n '/qcow2$/s#/Image/realServer-Template/current/qcow2/##p'))
        if [ ${#images[@]} -gt 0 ]; then
            for image in "${images[@]}"; do
                echo "$image"
                curl -m 60 -o $image "https://down.idc.wiki/Image/realServer-Template/current/qcow2/$image"
                if [ $? -ne 0 ]; then
                    sleep 6
                    curl -m 60 -o $image "https://down.idc.wiki/Image/realServer-Template/current/qcow2/$image"
                fi
                chmod 777 $image
                sleep 1
            done
        fi
      
    - name: Build Images
      run: |
        images=($(curl -s -m 6 https://down.idc.wiki/Image/realServer-Template/current/qcow2/ | grep -o '<a href="[^"]*">' | awk -F'"' '{print $2}' | sed -n '/qcow2$/s#/Image/realServer-Template/current/qcow2/##p'))
        if [ ${#images[@]} -gt 0 ]; then
            release_id=$(curl -s -m 6 -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/XiYan233/pve_kvm_images/releases/tags/latest" | jq -r '.id')
            for file in "${images[@]}"; do
                echo "Building images"
                ./rebuild_qcow2.sh $file
            done
            docker run --rm -v $(pwd):/data -w /data proxmox/vma \
            bash -c "for qcow2 in *.qcow2; do
                       raw=\${qcow2%.qcow2}.raw;
                       vma=\${qcow2%.qcow2}.vma.zst;
                       qemu-img convert -f qcow2 -O raw \$qcow2 \$raw;
                       vma create -v -c -z1 \$vma \$raw;
                       rm -f \$raw;
                     done"
        else
            echo "NO KVM IMAGES"
        fi
    - name: Upload Images
      run: |
        vma_images=($(ls *.vma.zst))
        if [ ${#vma_images[@]} -gt 0 ]; then
            release_id=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.id')
            for vma_image in "${vma_images[@]}"; do
                echo "Uploading $vma_image to release..."
                
                # Check if the asset already exists
                existing_asset_id=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets" | jq -r --arg name "$(basename "$vma_image")" '.[] | select(.name == $name) | .id')
                
                if [ -n "$existing_asset_id" ]; then
                    echo "Asset $vma_image already exists, deleting..."
                    curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/assets/$existing_asset_id"
                fi
                
                # Upload the new asset
                curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                     -H "Content-Type: application/octet-stream" \
                     --data-binary @"$vma_image" \
                     "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename "$vma_image")"
                
                # Clean up the local vma.zst image
                rm -f "$vma_image"
            done
        else
            echo "No vma.zst images found for upload."
            exit 1
        fi
        
